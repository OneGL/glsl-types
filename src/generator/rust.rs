use crate::uniforms::UniformType;

use super::common;

pub fn generate_rs_types_file(file_path: &std::path::PathBuf, output_folder: &std::path::PathBuf) {
    let file = std::fs::read_to_string(&file_path).unwrap();
    let uniforms = common::extract_uniforms(file);

    let mut output_file = String::new();
    output_file.push_str("// DO NOT EDIT THIS FILE\n");
    output_file.push_str("// This file is generated by glsl-types\n\n");

    // Define the types for each uniform at the top of the file
    for uniform in &uniforms {
        output_file.push_str(&format!(
            "type {} = {};\n",
            uniform.name,
            convert_uniform_to_rs(&uniform.uniform_type)
        ));
    }

    output_file.push_str("\n");

    let output_file_name = file_path.file_stem().unwrap().to_str().unwrap();
    let output_type_name = common::capitalize_first_letter(output_file_name);
    let uniform_type_name = &format!("{}Uniforms", output_type_name);

    output_file.push_str(&format!("struct {} {{\n", uniform_type_name));
    for uniform in uniforms {
        output_file.push_str(&format!("    {}: {},\n", uniform.name, uniform.name));
    }
    output_file.push_str("}");

    output_file.push_str("\n");
    output_file.push_str("\n");

    output_file.push_str(&format!("pub struct {} {{\n", output_type_name));
    output_file.push_str(&format!("    uniforms: {}\n", uniform_type_name));
    output_file.push_str("}");
    output_file.push_str("\n");

    let output_file_path = output_folder.join(format!("{}.rs", output_file_name));
    std::fs::write(output_file_path, output_file).unwrap();
}

fn convert_uniform_to_rs(uniform: &UniformType) -> String {
    let result = match uniform {
        UniformType::Sampler2d => "WebGLTexture",

        UniformType::Float => "f32",
        UniformType::Vec2 => "[f32; 2]",
        UniformType::Vec3 => "[f32; 3]",
        UniformType::Vec4 => "[f32; 4]",

        UniformType::Int => "i32",
        UniformType::Ivec2 => "[i32; 2]",
        UniformType::Ivec3 => "[i32; 3]",
        UniformType::Ivec4 => "[i32; 4]",

        UniformType::Uint => "u32",
        UniformType::Uvec2 => "[u32; 2]",
        UniformType::Uvec3 => "[u32; 3]",
        UniformType::Uvec4 => "[u32; 4]",

        UniformType::Bool => "bool",
        UniformType::Bvec2 => "[bool; 2]",
        UniformType::Bvec3 => "[bool; 3]",
        UniformType::Bvec4 => "[bool; 4]",

        UniformType::Mat2 => "[f32; 4]",
        UniformType::Mat3 => "[f32; 9]",
        UniformType::Mat4 => "[f32; 16]",
    };

    return result.to_string();
}
